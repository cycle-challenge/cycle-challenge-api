name: Continuous Deployment(CD)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions: 
  id-token: write  # OIDC JWT 요청을 위한 권한 부여
  contents: read   # actions/checkout 실행을 위한 권한
      
jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    # 테스트를 위한 Postgres/PostGIS 서비스 설정
    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v3 # 소스 코드 체크아웃

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle # Gradle 캐시 설정
          
      - name: Grant Execution Permission to gradlew
        run: chmod +x gradlew # gradlew 실행 권한 부여

      - name: Build with Gradle
        run: ./gradlew build # Gradle을 사용한 프로젝트 빌드
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USERNAME: testuser
          DB_PASSWORD: testpassword

      - name: Upload build artifact # 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: application
          path: ./build/libs/*.jar

  deploy:
    name: Deploy Project
    runs-on: ubuntu-latest
    needs: build # 빌드 작업이 성공적으로 완료된 후 실행

    steps:
      - uses: actions/checkout@v3

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: application # 빌드 작업에서 업로드한 아티팩트 다운로드

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Compress application for deployment
        run: zip -r ./$GITHUB_SHA.zip ./ # 다운로드한 아티팩트 압축
        
      - name: Upload to remote blob container
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.AWS_DEPLOY_BUCKET }}
        run: aws s3 cp --region $AWS_REGION ./$GITHUB_SHA.zip s3://$AWS_BUCKET/$GITHUB_SHA.zip
